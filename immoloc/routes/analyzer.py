from flask import Blueprint, request, jsonify

from ..model import model, client

bp = Blueprint("analyzer", __name__)

@bp.route("/analyzer", methods=["POST"])
def analyzer():
    """
    Analyzes a real estate advertisement and provides a critical opinion in French.
    This function expects a JSON payload with a key "real_estate_ad" containing the advertisement text.
    It uses an external chat model to generate a critical opinion on the advertisement.
    Returns:
        Response: A JSON response containing the critical opinion or an error message.
    Request JSON format:
        "real_estate_ad": "string"
    Responses:
        200 OK: 
            "real_estate_ad": "string"  # The critical opinion generated by the chat model.
        400 Bad Request:
            "error": "string"  # Error message indicating what went wrong.
    """
   
    try:
        data: dict = request.get_json()
        
        if "real_estate_ad" in data:
            if isinstance(data["real_estate_ad"], str):
                real_estate_ad: str = data["real_estate_ad"]
            else:
                return jsonify({"error": "Data error: must be a string"}), 400
        else:
            return jsonify({"error": "Data missing: real_estate_ad"}), 400
    except Exception as e:
        return jsonify({"error": f"Data error or data missing: {e}"}), 400

    
    try:
        chat_response = client.chat.complete(
            model=model,
            messages=[
                {
                    "role": "user",
                    "content": f"Analysis of real estate advertisements, Your goal is to give a critical opinion on this real estate ad. In French. Here is the announcement: {real_estate_ad}, Only If there is no place/location then display 'Entrer la localisation', Only If there is no surface (m2 / mÂ² / m 2) then display 'Entrer la surface du bien', Only If there is no type of property then display 'Entrer le type du bien', Only If there is no price then display 'Entrer le prix'"
                }
            ]
        )
    except Exception as e:
        return jsonify({"error": str(e)}), 400

    if "Entrer la localisation" in chat_response.choices[0].message.content:
        return jsonify({"error": "Data missing: location"}), 400
    if "Entrer la surface du bien" in chat_response.choices[0].message.content:
        return jsonify({"error": "Data missing: surface area"}), 400
    if "Entrer le type du bien" in chat_response.choices[0].message.content:
        return jsonify({"error": "Data missing: type of property"}), 400
    if "Entrer le prix" in chat_response.choices[0].message.content:
        return jsonify({"error": "Data missing: price"}), 400
    
    return jsonify({"real_estate_ad": chat_response.choices[0].message.content}), 200
